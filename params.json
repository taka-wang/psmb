{
  "name": "Psmb",
  "tagline": "Proactive service for modbus daemon",
  "body": "# psmb\r\n\r\n[![GoDoc](https://godoc.org/github.com/taka-wang/psmb?status.svg)](http://godoc.org/github.com/taka-wang/psmb)\r\n[![Go Report Card](https://goreportcard.com/badge/github.com/taka-wang/psmb)](https://goreportcard.com/report/github.com/taka-wang/psmb)\r\n[![Build Status](http://drone.cmwang.net/api/badges/taka-wang/psmb/status.svg)](http://drone.cmwang.net/taka-wang/psmb)\r\n[![CircleCI](https://circleci.com/gh/taka-wang/psmb.svg?style=shield&circle-token=791a0bee85922cdfd4a0fe580953408febe3cabd)](https://circleci.com/gh/taka-wang/psmb)\r\n[![codecov](https://codecov.io/gh/taka-wang/psmb/branch/dev/graph/badge.svg?token=wsuDctUrJO)](https://codecov.io/gh/taka-wang/psmb)\r\n\r\nProactive service library for [modbusd](https://github.com/taka-wang/modbusd)\r\n\r\n---\r\n\r\n## Environment variables\r\n\r\n- CONF_PSMBTCP: config file path\r\n- EP_BACKEND: endpoint of remote service discovery server (optional)\r\n\r\n## Contracts (Interfaces)\r\n\r\n- IProactiveService: proactive service\r\n- IReaderTaskDataStore:  read/poll task data store\r\n- IWriterTaskDataStore: write task data store\r\n- IHistoryDataStore: history data store\r\n- IFilterDataStore: filter data store\r\n- IConfig: config\r\n\r\n## Package management\r\n\r\n- I adopted [glide](https://glide.sh/) as package management system for this repository.\r\n\r\n## Worker Pool\r\n\r\n### Request\r\n\r\n![uml](http://uml.cmwang.net:8000/plantuml/svg/5Sh13O0W3030LNG0QSBJZxDKQ908XPGsnEtLzzsQEHIBP5AMIxMF7K1mkfJrijC6IMYinEf2gw1uupQH4tIh1IeE9O58lRIdVWdCH_VJuLy0)\r\n\r\n### Response\r\n\r\n![uml](http://uml.cmwang.net:8000/plantuml/svg/5Sh13O0W3030LNG0QVJfnragD4AaG4eRulRg-svEnMSBP9AdgDhw3Y0ut9KqsccTnDUYLDJvog1uupAmND2CCp1s9O50BTU7lmHXC_VJiRu0)\r\n\r\n---\r\n\r\n## Up and Running\r\n\r\n### Docker Compose (prefer)\r\n\r\n```bash\r\ndocker-compose build --pull\r\ndocker-compose up\r\n```\r\n\r\n### Manually\r\n\r\n#### Install libzmq (3.2.5)\r\n\r\n```bash\r\nwget https://github.com/zeromq/zeromq3-x/releases/download/v3.2.5/zeromq-3.2.5.tar.gz\r\ntar xvzf zeromq-3.2.5.tar.gz\r\ncd zeromq-3.2.5\r\n./configure\r\nmake\r\nsudo make install\r\nsudo ldconfig\r\n```\r\n\r\n#### Build\r\n\r\n```bash\r\n# install glide\r\ncurl https://glide.sh/get | sh\r\n\r\n# install dependencies\r\nglide install\r\n\r\n# build\r\ncd tcp-srv\r\ngo build -o psmbtcp-srv\r\n```\r\n\r\n---\r\n\r\n## Continuous Integration\r\n\r\nI do continuous integration and build docker images after git push by self-hosted drone.io server and [dockerhub]((https://hub.docker.com/r/takawang/c-modbus-slave/)) service.\r\n\r\n## Deployment Diagram\r\n\r\n![uml](http://uml.cmwang.net:8000/plantuml/svg/5Sh13O0W3030LNG0QVJfnraAD42aGA0DSNlrVRUcuh9wqfwNADB62T1ncf0agjL1tTKYLCIuoY1uupQn16ZA6HY7K0TFBTU7lmHji3M_NVln0W00)\r\n\r\n---\r\n\r\n## Unit tests\r\n\r\n- binary\r\n- types\r\n\r\n## Test cases\r\n\r\n### Binary\r\n\r\n- [x] Bytes to 16-bit integer array tests\r\n    - [x] `BytesToUInt16s` in big endian order - (1/4)\r\n    - [x] `BytesToUInt16s` in little endian order - (2/4)\r\n    - [x] `BytesToInt16s` in big endian order - (3/4)\r\n    - [x] `BytesToInt16s` in little endian order - (4/4)\r\n- [x] Bytes to 32-bit integer array tests\r\n    - [x] `BytesToUInt32s` in (ABCD) Big Endian order - (1/4)\r\n    - [x] `BytesToUInt32s` in (DCBA) Little Endian order - (2/4)\r\n    - [x] `BytesToUInt32s` in (BADC) Mid-Big Endian order - (3/4)\r\n    - [x] `BytesToUInt32s` in (CDAB) Mid-Little Endian order - (4/4)\r\n    - [x] `BytesToInt32s` in (ABCD) Big Endian order - (1/4)\r\n    - [x] `BytesToInt32s` in (DCBA) Little Endian order - (2/4)\r\n    - [x] `BytesToInt32s` in (BADC) Mid-Big Endian order - (3/4)\r\n    - [x] `BytesToInt32s` in (CDAB) Mid-Little Endian order - (4/4)\r\n- [x] Bytes to 32-bit float array tests\r\n    - [x] `BytesToFloat32s` in (ABCD) Big Endian order - (1/4)\r\n    - [x] `BytesToFloat32s` in (DCBA) Little Endian order - (2/4)\r\n    - [x] `BytesToFloat32s` in (BADC) Mid-Big Endian order - (3/4)\r\n    - [x] `BytesToFloat32s` in (CDAB) Mid-Little Endian order - (4/4)\r\n- [x] Bytes/registers utility tests\r\n    - [x] `BitStringToUInt8s` test\r\n    - [x] `BitStringToUInt8s` test - left comma\r\n    - [x] `BitStringToUInt8s` test - right comma\r\n    - [x] `BitStringToUInt8s` test - left, right comma\r\n    - [x] `RegistersToBytes` test\r\n    - [x] `BytesToHexString` test\r\n    - [x] `DecimalStringToRegisters` test\r\n    - [x] `DecimalStringToRegisters` test - left comma\r\n    - [x] `DecimalStringToRegisters` test - right comma\r\n    - [x] `DecimalStringToRegisters` test - left, right comma\r\n    - [x] `HexStringToRegisters` test\r\n    - [x] `HexStringToRegisters` test - wrong length\r\n    - [x] `LinearScalingRegisters` test\r\n    - [x] `LinearScalingRegisters` test - (0,0,0,0)\r\n    - [x] `LinearScalingRegisters` test - reverse\r\n\r\n### Types\r\n\r\n#### Upstream structure test\r\n\r\n- [x] One-off modbus tcp struct tests\r\n    - [x] `mbtcp.once.read` request test\r\n    - [x] `mbtcp.once.read` response test\r\n- [x] get/set modbus tcp timeout struct tests\r\n    - [x] `mbtcp.timeout.read` request test\r\n    - [x] `mbtcp.timeout.read` response test\r\n    - [x] `mbtcp.timeout.update` request test\r\n    - [x] `mbtcp.timeout.update` response test\r\n    - [x] `mbtcp.once.write` request test\r\n    - [x] `mbtcp.once.write` response test\r\n\r\n#### Downstream structure test\r\n\r\n- [x] modbus tcp downstreamstruct tests\r\n    - [x] `read` request test\r\n    - [x] `single read` response test\r\n    - [x] `multiple read` response test\r\n    - [x] `single write` request test\r\n    - [x] `multiple write` request test\r\n    - [x] `set timeout` request test\r\n    - [x] `get timeout` response test\r\n\r\n---\r\n\r\n## UML\r\n\r\n![uml](http://uml.cmwang.net:8000/plantuml/svg/5SZ13O0W3030LNG0QVpwSPPI2H1R8BGDwnllUNjjnFuadxmLiw4NmCGLShNYqJLDwirIiq1TmF35Os7BC5mO1DNI169KXQ4ImzytdXy0)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}